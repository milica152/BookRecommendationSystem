package com.project.demo;
import com.project.demo.model.Book
import java.util.Date;
import java.util.Calendar
import com.project.demo.model.AgeOfBook;

rule "New book"
    when
        b : Book(isAfterNYearsAgo(published,8))
    then
        System.out.println("Book published on " + b.getPublished() + " is " + AgeOfBook.NEW);
        b.setAgeOfBook(AgeOfBook.NEW);
end


rule "Old book"
    when
        b : Book(isBeforeNYearsAgo(published,40))
    then
        System.out.println("Book published on " + b.getPublished() + " is " + AgeOfBook.OLD);
        b.setAgeOfBook(AgeOfBook.OLD);
end




function boolean isAfterNYearsAgo(Date date, int nYears) {
    if (date != null) {
        java.util.Calendar newCal = java.util.Calendar.getInstance();
        newCal.add(java.util.Calendar.YEAR, -nYears);
        Date nYearsAgo = newCal.getTime();
        return date.after(nYearsAgo);
    } else {
        return false;
    }
}



function boolean isBeforeNYearsAgo(Date date, int nYears) {
    if (date != null) {
        java.util.Calendar newCal = java.util.Calendar.getInstance();
        newCal.add(java.util.Calendar.YEAR, -nYears);
        Date nYearsAgo = newCal.getTime();
        return date.before(nYearsAgo);
    } else {
        return false;
    }
}
