package rules;

import com.project.demo.model.Book;
import java.util.Date;
import java.util.Calendar;
import com.project.demo.model.AgeOfBook;
/*
function boolean isAfterNYearsAgo(Date date, int nYears) {
    if (date != null) {
        java.util.Calendar newCal = java.util.Calendar.getInstance();
        newCal.add(java.util.Calendar.YEAR, -nYears);
        Date nYearsAgo = newCal.getTime();
        return date.after(nYearsAgo);
    } else {
        return false;
    }
}

function boolean isBeforeNYearsAgo(Date date, int nYears) {
    if (date != null) {
        java.util.Calendar newCal = java.util.Calendar.getInstance();
        newCal.add(java.util.Calendar.YEAR, -nYears);
        Date nYearsAgo = newCal.getTime();
        return date.before(nYearsAgo);
    } else {
        return false;
    }
}*/

rule "New book"
    salience 10
    no-loop
    when
        b : Book($published : published, $published > 2012 )
    then
        System.out.println("rule New book fired.");
        modify(b){setAgeOfBook(AgeOfBook.NEW)};
end

rule "Old book"
    salience 10
    no-loop
    when
        b : Book($published : published, $published< 1980)
    then
        System.out.println("rule Old book fired.");
        modify(b){setAgeOfBook(AgeOfBook.OLD)};
end
